extends base_layout

block append jsscript-block
  script(src='/dist/simplemde.min.js?' + new Date().getTime())
  script(src='/markdown-it.min.js')
  script(src='/template.js')
  script const labels_exists = JSON.parse( `!{labels}` ); const this_article_id = `#{id}`; const current_labels = `#{current_labels}`;

block append stylesheet-block
  link(rel='stylesheet' href='/dist/simplemde.min.css')
  link(rel='stylesheet' href='/css/article_edit.css?' + new Date().getTime())

block main-body-block
  div.main
    div#edit-body
      div#edit-area
        textarea#md-editor
      div.markdown-display#display-area
    div#op-div
      div#article-labels.op-bar
        label#label-label 标签
        input#label-input-area(placeholder='输入标签' maxlength=10)
        div#labels-area
      div.op-bar
        button.operation-button#submit 发布文章
        button.operation-button#save 保存文章
  script#label-tpl(type='text/html').
    <div id="label-div-<%= ord %>" class='label-div label-div-label-<%= nclass %>'>
      <span><%= label %></span>
      <img id='label-div-delete-img-<%= ord %>' src='/images/icons/ic_clear_white_24dp_2x.png' onclick='deleteLabel(<%= ord %>)'></img>
    </div>
  script.
    var labels = [];
    var labelCount = 0;
    const labelTpl = $("#label-tpl").html();
    function deleteLabel(i) {
      let id = '#label-div-' + i;
      let label = $(id).children('span').text();
      labels.splice(labels.indexOf(label), 1);
      $(id).remove();
    }
    function addLabel(lbs) {
      if (typeof lbs == 'string') lbs = [lbs];
      for (let i in lbs) {
        let l = lbs[i];
        if (l === undefined || l === null || l === '') continue;
        if (labels.indexOf(l) == -1) {
          var params = {label: l, ord: labelCount++, nclass: labels_exists.indexOf(l) == -1 ? 'new' : 'existed'};
          $(template(labelTpl, params)).appendTo($('#labels-area'));
          labels.push(l);
        }
      }
    }
    (() => {
      $('#label-input-area').keydown((e) => {
        if (e.which == 13) {
          let l = $('#label-input-area').val();
          addLabel(l);
          $('#label-input-area').val('');
        }
      });
    })();
  if type == 'edit'
    script.
      const markdown_editor_config = {
        element: document.getElementById("md-editor"),
        status: false,
        spellChecker: false,
        promptURLs: true,
        initialValue: decodeURIComponent('#{content}')
      };
      function submitArticle(e) {
        console.log('submit');
        $('#submit').unbind('click');
        content = simplemde.value();
        $.ajax({
          url: 'http://localhost:3000/admin/articles/modify',
          data: {md: content, label: labels.join(','), id: this_article_id},
          type: "post",
          dataType: "json",
          success: (res) => {
            if (res.code == 0) {
              location.href = '/admin/articles';
            } else {
              alert(res.msg);
              $('#submit').click(submitArticle);
            }
          },
          error: () => {
            console.log('error');
            $('#submit').click(submitArticle);
          }
        });
      }
  else
    script.
      const markdown_editor_config = {
        element: document.getElementById("md-editor"),
        status: false,
        spellChecker: false,
        promptURLs: true
      };
      function submitArticle(e) {
        $('#submit').unbind('click');
        content = simplemde.value();
        $.ajax({
          url: 'http://localhost:3000/admin/add',
          data: {md: content, label: labels.join(',')},
          type: "post",
          dataType: "json",
          success: (res) => {
            if (res.code == 0) {
              location.href = '/articles';
            } else {
              alert(res.msg);
              $('#submit').click(submitArticle);
            }
          },
          error: () => {
            $('#submit').click(submitArticle);
          }
        });
      }
  script.
    var simplemde = new SimpleMDE(markdown_editor_config);
    var cm = simplemde.codemirror;
    var markdown = markdownit();
    markdown.renderer.rules.paragraph_open = markdown.renderer.rules.heading_open =
    markdown.renderer.rules.ordered_list_open = markdown.renderer.rules.bullet_list_open =
    markdown.renderer.rules.table_open =  injectLineNumbers;
    $('#display-area').html(markdown.render(simplemde.value()));
    $("#submit").click(submitArticle);
    
    // 这个是粘贴过来的,
    function injectLineNumbers(tokens, idx, options, env, slf) {
      var line;
      if (tokens[idx].map && tokens[idx].level === 0) {
        line = tokens[idx].map[0];
        tokens[idx].attrJoin('class', 'line');
        tokens[idx].attrSet('data-line', String(line));
      }
      return slf.renderToken(tokens, idx, options, env, slf);
    }
    //这个是我根据原函数的思想自己修改的
    function buildScrollMap() {
      var lineHeightMap = [], scrollMap = [], nonEmptyList = [],
          i, mirror = simplemde.codemirror;
      var $target = $("#display-area");
      /**
       * 这个由于我对javascript的宽高度量一直比较模糊
       * 现在还不能正确的使用scrollHeight, clientHeight等
       * 等搞清楚了再来修改
       * 先做一个记号 😊 
       */
      var offset = $target.scrollTop() - $target.offset().top;
      var lineCount = mirror.doc.lineCount();
      var firstLine = mirror.heightAtLine(0);
      for (i = 0; i < lineCount; i++) {
        lineHeightMap.push(Math.floor(mirror.heightAtLine(i) - firstLine));
      }
      for (i = 0; i < lineCount; i++) {
        scrollMap.push(-1);
      }
      nonEmptyList.push(0);
      scrollMap[0] = 0;
      $(".line").each((index, ele) => {
        var $ele = $(ele), _line = $ele.data('line');
        if (_line != 0) nonEmptyList.push(_line);
        scrollMap[_line] = Math.floor($ele.offset().top + offset);
      });

      var pos = 0;
      for (i = 1; i <= lineCount; i++) {
        if (scrollMap[i] != -1) {
          pos++;
          continue;
        }
        var a = nonEmptyList[pos];
        var b = nonEmptyList[pos + 1];
        scrollMap[i] = Math.floor((scrollMap[b] * (i - a) + scrollMap[a] * (b - i)) / (b - a));
      }
      // scrollmap[0]
      scrollMap[0] = 0;

      return {
        lineHeightMap: lineHeightMap,
        scrollMap: scrollMap
      };
    }

    /**
     * 原始的 debounce 函数，从网上找来的
     * 下学期研究 😊
     * http://www.cnblogs.com/fsjohnhuang/p/4147810.html
     */
    function myDebounce(func, idle) {
      var last;
      return function() {
        var ctx = this, args = arguments;
        if (last) clearTimeout(last);
        last = setTimeout(function() {
          func.apply(ctx, args);
        }, idle);
      }
    }

    var syncSrcScroll = myDebounce(function() {
      var $target = $('#display-area');
      var toffset = Math.ceil($target.scrollTop());
      var smap = buildScrollMap();
      var lineHeightMap = smap.lineHeightMap;
      var scrollMap = smap.scrollMap;
      var pos, i, lineCount = lineHeightMap.length;
      for (i = 0; i < lineCount; i++) {
        if (scrollMap[i] > toffset) {
          pos = i - 1;
          break;
        }
      }
      if (pos >= 0) {
      console.log('pos info, pos: ' + pos + ', scroll: ' + toffset);
      console.log('line height map: ' + JSON.stringify(lineHeightMap));
      console.log('scroll map: ' + JSON.stringify(scrollMap));
      simplemde.codemirror.scrollTo(0, lineHeightMap[pos]);
      } else {
        simplemde.codemirror.scrollTo(0, 0);
      }
    }, 600);

    var syncResScroll = myDebounce(function() {
      var etop = simplemde.codemirror.getScrollInfo().top;
      var smap = buildScrollMap();
      var lineHeightMap = smap.lineHeightMap,
          scrollMap = smap.scrollMap;
      var pos = 0, lineCount = lineHeightMap.length, i;
      for (i = 0; i < lineCount; i++) {
        if (lineHeightMap[i] > etop) {
          pos = i - 1;
          break;
        }
      }
      $("#display-area").scrollTop(scrollMap[pos]);
    }, 100);
    $("#display-area").on("touchstart mouseover", function(){
      simplemde.codemirror.off('scroll', syncResScroll);
      $('#display-area').on('scroll', syncSrcScroll);
    });
    $("#edit-area").on('mouseover', function() {
      $('#display-area').off('scroll');
      simplemde.codemirror.on('scroll', syncResScroll);
    });
    $("#edit-area").on('mouseout', function() {
      simplemde.codemirror.off('scroll', syncResScroll);
    });
    simplemde.codemirror.on('change', function() {
      $("#display-area").html(markdown.render(simplemde.value()));
      syncResScroll();
    });
    /**
     * 设置scroll async
     */
    
    addLabel(current_labels.split(','));