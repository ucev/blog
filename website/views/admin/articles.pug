extends base_layout

block main-body-block
  div.main
    div#target-div
      div#table-div
    script(type='text/babel').
      class ConfirmDialog extends React.Component {
        constructor(props) {
          super(props);
          this.handleConfirmClick = this.handleConfirmClick.bind(this);
          this.handleCancelClick = this.handleCancelClick.bind(this);
        }
        handleConfirmClick(e) {
          this.props.confirm();
        }
        handleCancelClick(e) {
          this.props.cancel();
        }
        render() {
          var styles = {};
          if (!this.props.visible) styles.display = 'none';
          return (
            <div className = 'dialog-div del-article-dialog' style = {styles}>
              <div className = 'dialog-header-div'>
                <div className = 'dialog-title-div'>{this.props.title}</div>
              </div>
              <div className = 'dialog-bottom-operation-bar'>
                <button className = 'dialog-operation-button dialog-confirm-button' onClick = {this.handleConfirmClick}>确定</button>
                <button className = 'dialog-operation-button dialog-cancel-button' onClick = {this.handleCancelClick}>取消</button>
              </div>
            </div>
          );
        }
      }
      class MoveGroupDialog extends React.Component {
        constructor(props) {
          super(props);
          this.handleConfirmClick = this.handleConfirmClick.bind(this);
          this.handleCancelClick = this.handleCancelClick.bind(this);
          this.handleGroupChange = this.handleGroupChange.bind(this);
          this.state = {
            newgroup : -1
          };
        }

        handleConfirmClick(e) {
          this.props.confirm(this.state.newgroup);
        }

        handleCancelClick(e) {
          this.props.cancel();
        }

        handleGroupChange(e) {
          var radio = e.target;
          if (radio.checked) {
            this.setState({
              newgroup: radio.value
            });
          }
        }

        render() {
          var styles = {};
          if (!this.props.visible) styles.display = 'none';
          var groupItems = this.props.categories.map((group) => {
            if (group.id == -1) return '';
            return (
              <li className = 'move-group-radio-li'>
                <input type = 'radio' name = 'photogroup' value = {group.id} onChange = {this.handleGroupChange}/>
                <label>{group.name}</label>
              </li>
            );
          });
          return (
            <div className = 'dialog-div option-dialog move-category-dialog' style = {styles}>
              <div className = 'dialog-main-body-div'>
                <ul id = 'move-group-radio-ul'>
                  {groupItems}
                </ul>
              </div>
              <div className = 'dialog-bottom-operation-bar'>
                <button className = 'dialog-operation-button dialog-confirm-button' onClick = {this.handleConfirmClick}>确定</button>
                <button className = 'dialog-operation-button dialog-cancel-button' onClick = {this.handleCancelClick}>取消</button>
              </div>
            </div>
          );
        }
      }
      class FilterInput extends React.Component {
        constructor(props) {
          super(props);
          this.handleChange = this.handleChange.bind(this);
        }
        handleChange(e) {
          if (e.which == 13) {
            var title = this.props.title;
            var value = e.target.value;
            this.props.change(title, value);
          }
        }
        render() {
          return (
            <div className = 'table-filter-item'>
              <label className = 'table-filter-item-label'>{this.props.label}</label>
              <input className = 'table-filter-item-input' onKeyDown = {this.handleChange} />
            </div>
          );
        }
      }
      class FilterSelect extends React.Component {
        constructor(props) {
          super(props);
          this.handleChange = this.handleChange.bind(this);
        }
        handleChange(e) {
          var title = this.props.title;
          var value = e.target.value;
          this.props.change(title, value);
        }
        render() {
          const options = this.props.options.map((opt) => {
            //console.log('reset: ' + this.props.reset + ', value: ' + opt.value + ', default:' + this.props.defaultVal + ', title: ' + opt.value);
            if (this.props.reset == true && opt.value == -1) {
              //console.log('true' + new Date().toLocaleString());
              return <option value = {opt.value} selected = 'selected'>{opt.title}</option>
            } else {
              return <option value = {opt.value}>{opt.title}</option>
            }
          });
          return (
            <div className = 'table-filter-item'>
              <label className = 'table-filter-item-label'>{this.props.label}</label>
              <select className = 'table-filter-item-select' onChange = {this.handleChange} >
                {options}
              </select>
            </div>
          );
        }
      }
      class TableNavLinkLi extends React.Component {
        constructor(props) {
          super(props);
          this.handleClick = this.handleClick.bind(this);
        }
        handleClick() {
          this.props.click(this.props.page);
        }
        render() {
          var classes = 'table-nav-ul-li';
          if (this.props.current == this.props.page) classes += ' table-nav-ul-li-current';
          return (
            <li className = {classes} onClick = {this.handleClick}>{this.props.title}</li>
          );
        }
      }
      class TableNavLink extends React.Component {
        constructor(props) {
          super(props);
          this.getRenderData = this.getRenderData.bind(this);
          this.handleClick = this.handleClick.bind(this);
        }
        handleClick(pg) {
          this.props.pagechange(pg);
        }
        getRenderData() {
          const page = this.props.page;
          const total = this.props.total;
          var start = page < 5 ? 0 : page - 5;
          var len;
          if (start + 10 <= total) {
            len = 10;
          } else if (total - 10 > 0) {
            start = total - 10;
            len = 10;
          } else {
            start = 0;
            len = total;
          }
          var lis = [];
          if (page != 0) lis.push(<TableNavLinkLi page = {page - 1} current = {page} title='上一页' click = {this.handleClick} />);
          for (let i = 1; i <= len; i++)
            lis.push(<TableNavLinkLi page = {start + i - 1} current = {page} title= {start + i} click = {this.handleClick} />);
          if (page + 1 < total) lis.push(<TableNavLinkLi page = {page + 1} current = {page} title = '下一页' click = {this.handleClick} />);
          return lis;
        }
        render() {
          const lis = this.getRenderData();
          return (
            <ul id = 'table-nav-ul'>
              {lis}
            </ul>
          );
        }
      }
      class TableLabel extends React.Component {
        constructor(props) {
          super(props);
          this.handleCheckStateChange = this.handleCheckStateChange.bind(this);
        }
        handleCheckStateChange(e) {
          this.props.allChecked(e.target.checked);
          e.stopPropagation();
        }
        render() {
          return (
            <tr className='content-row-label'>
              <th className='content-row-check-label'><input type='checkbox' onChange = {this.handleCheckStateChange}/></th>
              <th className='content-row-index-label'>序号</th>
              <th className='content-row-title-label'>标题</th>
              <th className='content-row-category-label'>类别</th>
              <th className='content-row-label-label'>标签</th>
              <th className='content-row-status-label'>状态</th>
              <th className='content-row-pageview-label'>阅读次数</th>
              <th className='content-row-operation-label'>操作</th>
            </tr>
          );
        }
      }
      class ArticleRow extends React.Component {
        constructor(props) {
          super(props);
          this.article_state_label = {
            on: '已上线',
            off: '已下线'
          };
          this.handleStateClick = this.handleStateClick.bind(this);
          this.handleCheckStateChange = this.handleCheckStateChange.bind(this);
          this.article_operation = {
            on: <ul className='article-operation-ul'><li data-type='off' onClick = {this.handleStateClick}>下线</li><li data-type='check' onClick = {this.handleStateClick}>核查</li></ul>,
            off: <ul className='article-operation-ul'><li data-type='on' onClick = {this.handleStateClick}>上线</li><li data-type='move' onClick = {this.handleStateClick}>移动</li><li data-type='check' onClick = {this.handleStateClick}>核查</li><li data-type='del' onClick = {this.handleStateClick}>删除</li></ul>
          }
        }
        handleStateClick(e) {
          var id = this.props.article.id;
          var type = e.target.getAttribute('data-type');
          this.props.handleStateClick(id, type);
        }
        handleCheckStateChange(e) {
          var id = this.props.article.id;
          var checked = e.target.checked;
          this.props.checkStateChange(id, checked);
        }
        render() {
          var article = this.props.article;
          const url = '/articles/view/' + article.id;
          const topStatus = article.top == 0 ? {} : {color: '#EF5350'};
          const articleState = this.article_state_label[article.state];
          const operation = this.article_operation[article.state];
          const checked = this.props.checked === true ? 'checked' : '';
          return (
            <tr className='content-row-data'>
              <td className='content-row-checkbox-data'><input type='checkbox' checked = {checked} onChange = {this.handleCheckStateChange}/></td>
              <td className='content-row-index-data' onClick = {this.handleIndexClick}>{this.props.index + 1}</td>
              <td className='content-row-title-data' style={topStatus}><a href={url}>{article.title}</a></td>
              <td className='content-row-category-data'>{article.category}</td>
              <td className='content-row-label-data'>{article.label}</td>
              <td className='content-row-status-data'>{articleState}</td>
              <td className='content-row-pageview-data'>{article.pageview}</td>
              <td className='content-row-operation-data'>{operation}</td>
            </tr>
          );
        }
      }
      class ArticleTable extends React.Component {
        constructor(props) {
          super(props);
          this.allChecked = this.allChecked.bind(this);
          this.handleStateClick = this.handleStateClick.bind(this);
          this.checkStateChange = this.checkStateChange.bind(this);
        }
        allChecked(checked) {
          this.props.allChecked(checked);
        }
        handleStateClick(id, type) {
          if (type == 'on' || type == 'off') {
            this.props.articleStateChange(id, type);
          } else if (type == 'del') {
            this.props.delete(id);
          } else if (type == 'check') {
            location.href = `/admin/articles/modify?id=${id}`;
          } else if (type == 'move') {
            this.props.handleMoveCategory(id);
          }
        }
        checkStateChange(id, checked) {
          this.props.checkStateChange(id, checked);     
        }
        render() {
          var that = this;
          const articleRows = this.props.articles.map((article, index, arr) => {
            var checked = that.props.checkState[article.id];
            return (
              <ArticleRow key = {index} 
                          index = {index} 
                          checked = {checked} 
                          article = {article} 
                          handleStateClick = {this.handleStateClick} 
                          checkStateChange = {this.checkStateChange} />
            );
          });
          return (
            <table className='content-table'>
              <thead>
                <TableLabel allChecked = {this.allChecked} />
              </thead>
              <tbody>
                { articleRows }
              </tbody>
              <tfoot>
              </tfoot>
            </table>
          );
        }
      }
      class ArticleLayout extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            articles: [],
            current: 0,
            total: 0,
            checkState: {},
            // delete dialog
            delVisible: false,
            delArticleId: -1,
            // move dialog
            moveVisible: false,
            categories: [],
            moveArticleId: -1
          }
          this.stateOptions = [
            {value: '-1', title: '全部'},
            {value: 'on', title: '已上线'},
            {value: 'off', title: '已下线'}
          ];
          this.opeOptions = [
            {value: '-1', title: '--选择操作--'},
            {value: 'on', title: '上线'},
            {value: 'off', title: '下线'},
            {value: 'move', title: '移动'},
            {value: 'del', title: '删除'}
          ];
          this.addArticle = this.addArticle.bind(this);
          this.articleStateChange = this.articleStateChange.bind(this);
          this.articleGroupChange = this.articleGroupChange.bind(this);
          this.allChecked = this.allChecked.bind(this);
          this.checkStateChange = this.checkStateChange.bind(this);
          this.handlePageChange = this.handlePageChange.bind(this);
          this.handleFilterChange = this.handleFilterChange.bind(this);
          this.handleDeleteArticle = this.handleDeleteArticle.bind(this);
          this.deleteArticleConfirm = this.deleteArticleConfirm.bind(this);
          this.deleteArticleCancel = this.deleteArticleCancel.bind(this);
          this.fetchArticles = this.fetchArticles.bind(this);
          this.fetchSingleArticle = this.fetchSingleArticle.bind(this);
          this.fetchCategories = this.fetchCategories.bind(this);
          this.groupOpeChange = this.groupOpeChange.bind(this);
          // categories
          this.moveCategoryConfirm = this.moveCategoryConfirm.bind(this);
          this.moveCategoryCancel = this.moveCategoryCancel.bind(this);
          this.handleMoveCategory = this.handleMoveCategory.bind(this);

          this.filter = {start : 0};
          this.fetchArticles();
          this.fetchCategories();
        }
        addArticle() {
          location.href = '/admin/articles/add';
        }
        articleStateChange(id, type, isgroup = false) {
          var that = this;
          fetch('/admin/datas/articles/state', {
              data: {id: id, state: type},
              type: 'get',
              dataType: 'json',
              success: function(dt) {
                if (isgroup) {
                  that.fetchArticles();
                } else {
                  that.fetchSingleArticle(id);
                }
              },
              error: function() {
                console.log(error);
              }
            }
          );
        }
        articleGroupChange(id, gid, isgroup = false) {
          var that = this;
          fetch('/admin/datas/articles/move', {
            data: {id: id, gid: gid},
            type: 'get',
            dataType: 'json',
            success: function(dt) {
              if (dt.code == 0) {
                if (isgroup) {
                  that.fetchArticles();
                } else {
                  that.setState({
                    moveVisible: false,
                    moveArticleId: -1
                  })
                  that.fetchSingleArticle(id);
                }
              }
            }
          })
        }
        checkStateChange(id, checked) {
          var checkState = this.state.checkState;
          checkState[id] = checked;
          this.setState({
            checkState: checkState
          })
        }
        allChecked(checked) {
          var articles = this.state.articles;
          var checkState = {};
          for (let i = 0; i < articles.length; i++) {
            checkState[articles[i].id] = checked;
          }
          this.setState({
            checkState: checkState
          })
        }
        fetchSingleArticle(id) {
          var that = this;
          fetch('/admin/datas/articles/get', {
            type: 'get',
            data: {id: id},
            dataType: 'json',
            success: function(dt) {
              if (dt.code == 0) {
                var articles = that.state.articles;
                for (let i in articles) {
                  if (articles[i].id == id) {
                    articles[i] = dt.data;
                    that.setState({
                      articles: articles
                    });
                    break;
                  }
                }
              }
            }
          })
        }
        fetchArticles() {
          var that = this;
          fetch('/admin/datas/articles/get', {
            type: 'get',
            data: that.filter,
            dataType: 'json',
            success: function(dt) {
              if (dt.code == 0) {
                that.setState({
                  articles: dt.data.data,
                  current: dt.data.current,
                  total: dt.data.total,
                  checkState: {}
                });
              }
            }
          });
        }
        fetchCategories() {
          var that = this;
          fetch('/admin/datas/categories/get', {
            type: 'get',
            dataType: 'json',
            success: function(dt) {
              if (dt.code == 0) {
                that.setState({
                  categories: dt.data
                })
              }
            }
          })
        }
        handlePageChange(i) {
          this.filter.start = i;
          this.fetchArticles();
        }
        handleFilterChange(label, value) {
          if (this.filter[label] == value) return;
          this.filter[label] = value;
          this.filter.start = 0;
          this.fetchArticles();
        }
        handleDeleteArticle(id) {
          this.setState({
            delVisible: true,
            delArticleId: id
          })
        }
        deleteArticleConfirm() {
          var that = this;
          fetch('/admin/datas/articles/delete', {
            data: {id: that.state.delArticleId},
            type: 'post',
            dataType: 'json',
            success: function(dt) {
              if (dt.code == 0) {
                that.setState({
                  delVisible: false,
                  delArticleId: -1
                })
                that.fetchArticles();
              }
            }
          })
        }
        deleteArticleCancel() {
          this.setState({
            delVisible: false
          })
        }
        groupOpeChange(title, value) {
          var checkState = this.state.checkState;
          var ids = [];
          for (let key in checkState) {
            if (checkState[key]) ids.push(key);
          }
          ids = ids.join(',');
          if (value == 'on' || value == 'off') {
            this.articleStateChange(ids, value, true);
          }
        }
        //category
        moveCategoryConfirm(gid) {
          this.articleGroupChange(this.state.moveArticleId, gid, false);
        }
        moveCategoryCancel() {
          this.setState({
            moveVisible: false
          })
        }
        handleMoveCategory(id) {
          this.setState({
            moveArticleId: id,
            moveVisible: true
          })
        }
        render() {
          /**
           * 这样感觉封装性稍差一点
           * 以后更有体会了再来看看😊
           * 先做一个标记
           */
          var groupopeReset = true;
          return (
            <div>
              <div className = 'table-filter-bar table-filter-bar-top'>
                <button className = 'operation-button' onClick = {this.addArticle}>添加文章</button>
                <FilterInput title = 'label' label = '标签' change = {this.handleFilterChange} />
                <FilterInput title = 'category' label = '类别' change = {this.handleFilterChange} />
                <FilterSelect title = 'state' label = '状态' options = {this.stateOptions} change = {this.handleFilterChange} />
              </div>
              <ArticleTable articles = {this.state.articles} 
                            checkState = {this.state.checkState} 
                            fetchSingleArticle = {this.fetchSingleArticle} 
                            checkStateChange = {this.checkStateChange} 
                            articleStateChange = {this.articleStateChange}
                            handleMoveCategory = {this.handleMoveCategory}
                            allChecked = {this.allChecked} 
                            delete = {this.handleDeleteArticle}/>
              <div className = 'table-filter-bar table-filter-bar-bottom'>
                <FilterSelect title = 'groupope' 
                              options = {this.opeOptions} 
                              change = {this.groupOpeChange} 
                              reset = {groupopeReset} 
                              defaultVal = '-1'/>
              </div>
              <TableNavLink page = {this.state.current} 
                            total = {this.state.total} 
                            pagechange = {this.handlePageChange} />
              <ConfirmDialog title = '确认删除?' 
                             confirm = {this.deleteArticleConfirm} 
                             cancel = {this.deleteArticleCancel} 
                             visible = {this.state.delVisible} />
              <MoveGroupDialog categories = {this.state.categories}
                             confirm = {this.moveCategoryConfirm}
                             cancel = {this.moveCategoryCancel}
                             visible = {this.state.moveVisible} />
            </div>
          );
        }
      }
      /**
       * 以后再修改下面的函数
       * 权当学习
       */
      function fetch(url, {
          data = {}, 
          type = 'get', 
          dataType = 'text', 
          success = function(){}, 
          error = function(){}, 
          complete = function(){}}) {
        function urlParamsEncode(obj) {
          var param = '';
          for (let key in obj) {
            param += (encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]) + '&');
          }
          return param.substring(0, param.length - 1);
        }
        var xhr = new XMLHttpRequest();
        if (xhr == null) return;
        if (type == 'get') {
          var params = urlParamsEncode(data);
          if (!url.endsWith('?')) url += '?';
          url += params;
        }
        xhr.open(type, url);
        xhr.onreadystatechange = function () {
          if (xhr.readyState == 4) {
            complete();
            if (xhr.status == 200) {
              switch (dataType) {
                case 'json':
                  success(JSON.parse(xhr.responseText));
                  break;
                case 'xml':
                  success(xhr.responseXML);
                  break;
                case 'text':
                default:
                  success(xhr.responseText);
                  break;
              }
            } else {
              // 此处没有参数
              error();
            }
          }
        };
        if (type == 'post') {
          if (data instanceof FormData) {
            //xhr.setRequestHeader('content-type', 'multipart/form-data');
            xhr.send(data);
          } else {
            var params = urlParamsEncode(data);
            xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
            xhr.send(params)
          }
        } else {
          xhr.send();
        }
      }
      ReactDOM.render(
        <ArticleLayout />,
        document.getElementById('table-div')
      );