extends base_layout

block main-body-block
  div.main#reform-area
  script(type='text/babel').
    class DetailArea extends React.Component {
      constructor(props) {
        super(props);
        this.articleOrderChange = this.articleOrderChange.bind(this);
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.prefaceButtonClicked = this.prefaceButtonClicked.bind(this);
      }
      articleOrderChange(e) {
        this.props.orderChange(e.target.value);
      }
      prefaceButtonClicked(e) {
        var type = e.target.getAttribute('data-type');
        var isSet = type == 'set';
        this.props.prefaceChange(this.props.data.id, isSet);
      }
      handleKeyDown(e) {
        if (e.which == 13) {
          this.props.orderChange(e.target.value, true);
        }
      }
      render() {
        var data = this.props.data;
        if (data.id) {
          var opeArea;
          if (data.type == 'dir') {
            opeArea = (
              <div id = 'refact-detail-ope-area'>
                <button id = 'refact-detail-ope-button' className = 'operation-button operation-button-confirm' data-type = 'cancel' onClick = {this.prefaceButtonClicked} >取消序言</button>
              </div>
            )
          } else {
            opeArea = (
              <div id = 'refact-detail-ope-area'>
                <button id = 'refact-detail-ope-button' className = 'operation-button operation-button-confirm' data-type = 'set' onClick = {this.prefaceButtonClicked} >设为序言</button>
                <label id = 'refact-detail-ope-order-label'>展示顺序</label><input id = 'refact-detail-ope-order-input' type = 'number' value = {data.suborder} onChange = {this.articleOrderChange} onKeyDown = {this.handleKeyDown} />
              </div>
            )
          }
          return (
            <div id = 'refact-detail-area'>
              <div id = 'refact-article-brief-area'>
                <h1 id = 'refact-article-brief-area-title'>{data.title}</h1>
                <div id = 'refact-article-brief-area-descp'>{data.descp}</div>
              </div>
              {opeArea}
            </div>
          )
        } else {
          return (
            <div id = 'refact-detail-area'></div>
          )
        }
      }
    }
    class ArticleItemLi extends React.Component {
      constructor(props) {
        super(props);
        this.onItemClicked = this.onItemClicked.bind(this);
      }
      onItemClicked (e) {
        var article = this.props.article;
        this.props.click('art', article.id);
      }
      render() {
        var depth = this.props.depth;
        var styles = {
          'padding-left': (depth * 20 + 20) + 'px'
        }
        var article = this.props.article;
        return <li className = 'category-tree-article-li' style = {styles} onClick = {this.onItemClicked} >{article.title}</li>
      }
    }
    class CategoryItemLi extends React.Component {
      constructor(props) {
        super(props);
        this.categoryState = {
          expand: 'expand',
          collapse: 'collapse'
        }
        this.handleCategoryClick = this.handleCategoryClick.bind(this);
      }
      handleCategoryClick(e) {
        var target = e.target;
        var stat = target.getAttribute('data-state');
        if (stat == this.categoryState.expand) {
          target.setAttribute('data-state', this.categoryState.collapse);
          target.nextSibling.style.display = 'none';
        } else {
          target.setAttribute('data-state', this.categoryState.expand);
          target.nextSibling.style.display = 'block';
        }
        this.props.click('dir', this.props.category.id);
      }
      render() {
        var depth = this.props.depth;
        var styles = {
          'padding-left': (depth * 20 + 20) + 'px'
        }
        var category = this.props.category;
        var content = category.childs.map((child) => {
          if (child.type == 'art') {
            return <ArticleItemLi article = {child} depth = {depth + 1} click = {this.props.click} />
          } else {
            return <CategoryItemLi category = {child} depth = {depth + 1} click = {this.props.click}/>
          }
        })
        return (
          <li className = 'category-tree-category-li'>
            <span className = 'category-tree-category-title' date-state = {this.categoryState.expand} onClick = {this.handleCategoryClick} style = {styles}>{category.title}</span>
            <ul className = 'category-tree-category-ul'>
              {content}
            </ul>
          </li>
        )
      }
    }
    class CategoryTree extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        var tree = this.props.tree;
        if (tree.length) {
          return (
            <div id = 'refact-tree-area'>
              <ul className = 'category-tree-category-ul'>
                <CategoryItemLi category = {this.props.tree[0]} depth = {0} click = {this.props.click} />
              </ul>
            </div>
          );
        } else {
          return <div>EMPTY</div>
        }
      }
    }
    class ReformArea extends React.Component {
      constructor(props) {
        super(props);
        var cid = Number(location.pathname.match(/\/admin\/categories\/refact\/(\d+)/)[1]);
        this.state = {
          cid: cid,
          tree: [],
          detail: {}
        }
        this.articleOrderChange = this.articleOrderChange.bind(this);
        this.categoryPrefaceChange = this.categoryPrefaceChange.bind(this);
        this.__getReactDetail = this.__getReactDetail.bind(this);
        this.getReactDetail = this.getReactDetail.bind(this);
        this.getCategoryTree = this.getCategoryTree.bind(this);
        this.getCategoryTree();
      }
      articleOrderChange(newOrder, update = false) {
        var that = this;
        var id = this.state.detail.id;
        if (update) {
          fetch('/admin/datas/articles/order', {
            data: {id: id, order: newOrder},
            type: 'get',
            dataType: 'json',
            success: function(dt) {
              console.log(JSON.stringify(dt));
              if (dt.code == 0) {
                that.getCategoryTree();
              }
            }
          })
        } else {
          var detail = this.state.detail;
          detail.suborder = newOrder;
          this.setState({
            detail: detail
          })
        }
      }
      categoryPrefaceChange(id, isSet = true) {
        var that = this;
        var detail = this.state.detail;
        if (detail.type != 'dir') {
          return;
        }
        var data = {
          category: detail.typeid,
          preface: id,
          isSet: isSet
        }
        fetch('/admin/datas/categories/preface', {
          data: data,
          type: 'get',
          dataType: 'json',
          success: function(dt) {
            console.log(JSON.stringify(dt));
            if (dt.code == 0) {
              that.getCategoryTree();
            }
          }
        })
      }
      getCategoryTree() {
        var that = this;
        var cid = this.state.cid;
        fetch('/admin/datas/categories/tree', {
          data: {id: cid},
          type: 'get',
          dataType: 'json',
          success: function(dt) {
            if (dt.code == 0) {
              var data = dt.data;
              var root = data[0];
              that.__getReactDetail(
                root.type,
                root.id,
                function(dt) {
                  that.setState({
                    tree: data,
                    detail: dt
                  })
                }
              )
            }
          }
        })
      }
      getReactDetail(type, id) {
        var that = this;
        this.__getReactDetail(type, id, function(dt) {
          that.setState({
            detail: dt
          })
        });
      }
      __getReactDetail(type, id, cb) {
        console.log('__getReactDetail  id: ' + id + ', type: ' + type);
        fetch('/admin/datas/categories/refact/get', {
          data: {type: type, id: id},
          type: 'get',
          dataType: 'json',
          success: function(dt) {
            if (dt.code == 0) {
              cb(dt.data);
            }
          }
        })
      }
      render() {
        return (
          <div id = 'refact-area'>
            <CategoryTree tree = {this.state.tree} click = {this.getReactDetail} />
            <DetailArea data = {this.state.detail} orderChange = {this.articleOrderChange} prefaceChange = {this.categoryPrefaceChange} />
          </div>
        )
      }
    }
    ReactDOM.render(
      <ReformArea />,
      document.getElementById('reform-area')
    );
      function fetch(url, {
          data = {}, 
          type = 'get', 
          dataType = 'text', 
          success = function(){}, 
          error = function(){console.log('err');}, 
          complete = function(){}}) {
        function urlParamsEncode(obj) {
          var param = '';
          for (let key in obj) {
            param += (encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]) + '&');
          }
          return param.substring(0, param.length - 1);
        }
        var xhr = new XMLHttpRequest();
        if (xhr == null) return;
        if (type == 'get') {
          var params = urlParamsEncode(data);
          if (!url.endsWith('?')) url += '?';
          url += params;
        }
        xhr.open(type, url);
        xhr.onreadystatechange = function () {
          if (xhr.readyState == 4) {
            complete();
            if (xhr.status == 200) {
              switch (dataType) {
                case 'json':
                  success(JSON.parse(xhr.responseText));
                  break;
                case 'xml':
                  success(xhr.responseXML);
                  break;
                case 'text':
                default:
                  success(xhr.responseText);
                  break;
              }
            } else {
              // 此处没有参数
              error();
            }
          }
        };
        if (type == 'post') {
          if (data instanceof FormData) {
            //xhr.setRequestHeader('content-type', 'multipart/form-data');
            xhr.send(data);
          } else {
            var params = urlParamsEncode(data);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.send(params);
          }
        } else {
          xhr.send();
        }
      }