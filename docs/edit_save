
    script(type='text/html').
      class PhotoFlowOperationBar extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            moveVisible: false,
            delVisible: false
          }
          this.handleUploadButtonClick = this.handleUploadButtonClick.bind(this);
          this.handleUploadInputChange = this.handleUploadInputChange.bind(this);

          // Dialog Visibility
          this.hideMoveDialog = this.hideMoveDialog.bind(this);
          this.hideDelDialog = this.hideDelDialog.bind(this);
          // MoveDialog
          this.handleMoveConfirm = this.handleMoveConfirm.bind(this);
          this.handleMoveCancel = this.handleMoveCancel.bind(this);
          // DeleteDialog
          this.handleDelConfirm = this.handleDelConfirm.bind(this);
          this.handleDelCancel = this.handleDelCancel.bind(this);
          // button action
          this.moveButtonClick = this.moveButtonClick.bind(this);
          this.delButtonClick = this.delButtonClick.bind(this);
          // all-check
          this.handleAllCheckChanged = this.handleAllCheckChanged.bind(this);
        }

        handleUploadButtonClick(e) {
          var input = this.uploadInput;
          input.click();
        }

        handleUploadInputChange(e) {
          this.props.handleUploadInputChange(e);
        }

        hideMoveDialog() {
          this.setState({
            moveVisible: false
          });
        }

        hideDelDialog() {
          this.setState({
            delVisible: false
          });
        }

        handleMoveConfirm(new_gid) {
          this.props.handleMoveChecked(new_gid);
          this.hideMoveDialog();
        }

        handleMoveCancel() {
          this.hideMoveDialog();
        }

        handleDelConfirm() {
          this.props.handleDeleteChecked();
          this.hideDelDialog();
        }

        handleDelCancel() {
          this.hideDelDialog();
        }

        moveButtonClick() {
          this.setState({
            moveVisible: true
          });
        }

        delButtonClick() {
          this.setState({
            delVisible: true
          })
        }

        handleAllCheckChanged(e) {
          var allChecked = e.target.checked;
          this.props.handleAllCheckChanged(allChecked);
        }
        render() {
          var uploadInputStyles = {
            display: 'none'
          };
          return (
            <div>
              <div className = 'photo-operation-bar' id = 'photo-operation-bar-first'>
                <button id = 'upload-image-button' className='operation-button' onClick = {this.handleUploadButtonClick} >上传图片</button>
                <input ref = {(input) => {this.uploadInput = input;}} id = 'upload-image-input' type = 'file' accept="image/*" style = {uploadInputStyles} onChange = {this.handleUploadInputChange} />
              </div>
              <div className = 'photo-operation-bar' id = 'photo-operation-bar-second'>
                <input type='checkbox' onChange = {this.handleAllCheckChanged}/><label>全选</label>
                <div id = 'photo-flow-opebar-move-div'>
                  <button id = 'photo-flow-opebar-move-button' className = 'operation-button operation-button-confirm' onClick = {this.moveButtonClick}>移动分组</button>
                  <MovePhotoGroupDialog confirm = {this.handleMoveConfirm} cancel = {this.handleMoveCancel} visible = {this.state.moveVisible}/>
                </div>
                <div id = 'photo-flow-opebar-del-div'>
                  <button id = 'photo-flow-opebar-del-button' className = 'operation-button operation-button-cancel' onClick = {this.delButtonClick}>删除</button>
                  <ConfirmDialog title = '确认删除?' confirm = {this.handleDelConfirm} cancel = {this.handleDelCancel} visible = {this.state.delVisible} />
                </div>
              </div>
            </div>
          );
        }
      }
      class PhotoItem extends React.Component {
        constructor(props) {
          super(props);
          this.photoOnLoad = this.photoOnLoad.bind(this);
        }
        photoOnLoad(e) {
          var img = e.target;
          var a = new Image();
          a.src = img.src;
          var sw = a.width;
          var sh = a.height;
          var min = sw < sh ? sw : sh;
          var scale = min / 200;
          var nw = sw / scale;
          var nh = sh / scale;
          img.style.width = nw + 'px';
          img.style.height = nh + 'px';
        }
        render() {
          var photoSrc = '/images/blog/' + this.props.photo.name;
          var checked = this.props.checked ? "checked" : "";
          return (
            <li className = 'photo-flow-item-li'>
              <div className = 'photo-flow-item-li-img-div'>
                <img className = 'photo-flow-item-li-img' src= {photoSrc} onLoad = {this.photoOnLoad}></img>
              </div>
              <div className = 'photo-flow-item-name-div'>
                <span className = 'photo-flow-item-name-span'>{this.props.photo.title}</span>
              </div>
            </li>
          );
        }
      }
      class PhotoFlow extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            photos: [],
          };
          this.handleUploadInputChange = this.handleUploadInputChange.bind(this);
          this.getGroupPhotos = this.getGroupPhotos.bind(this);
          this.getGroupPhotos();
        }
        // 上传图片
        handleUploadInputChange(e) {
          var that = this;
          var input = e.target;
          var file = input.files[0];
          var fd = new FormData();
          fd.append('file', file);
          fd.append('gid', this.props.gid);
          fetch('/admin/datas/photos/add', {
            data: fd,
            type: 'post',
            dataType: 'json',
            success: function(dt) {
              alert('upload finish');
            },
            error: function(err) {
              console.log('error');
            }
          });
        }
        getGroupPhotos() {
          var that = this;
          // this or that 😊 在函数参数中，待查
          fetch('/admin/datas/photos/get', {
            data: {gid: this.props.gid},
            type: 'get',
            dataType: 'json',
            success: function(dt) {
              if (dt.code == 0) {
                that.setState({
                  photos: dt.data,
                  checkState: {}
                });
              }
            }
          })
        }
        render() {
          const items = this.state.photos.map((photo) => {
            var checked = this.state.checkState[photo.id] ? true : false;
            return <PhotoItem photo = {photo}/>
          });
          return (
            <div id = 'photo-flow-div'>
              <PhotoFlowOperationBar handleUploadInputChange = {this.handleUploadInputChange} />
              <ul id = 'photo-flow-items-ul'>
                {items}
              </ul>
            </div>
          );
        }
      }
      class PhotoGroupItem extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            inputVisible: false,
            delVisible: false
          }
          this.handleGroupItemClick = this.handleGroupItemClick.bind(this);
        }
        handleGroupItemClick(e) {
          var gid = this.props.group.id;
          this.props.handleGroupItemClick(gid);
          e.stopPropagation();
        }
        render() {
          var group = this.props.group;
          var gid = group.id;
          var classes = 'photo-group-item-li';
          if (gid == this.props.gid) classes += ' photo-group-item-li-current';
          if (gid < 2) {
            return (
              <li className = {classes}>
                <span className = 'photo-group-item-li-title-span' data-gid = {group.id} onClick = {this.handleGroupItemClick}>{group.name}({group.count})</span>
              </li>
            );
          }
        }
      }
      class PhotoGroupBar extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            groups: this.props.groups,
            addVisible: false,
            opeImgVisible: false
          }
          this.handleConfirm = this.handleConfirm.bind(this);
          this.handleCancel = this.handleCancel.bind(this);
          this.handleGroupItemClick = this.handleGroupItemClick.bind(this);
          this.fetchGroupData = this.fetchGroupData.bind(this);
          this.toggleOpeImgState = this.toggleOpeImgState.bind(this);
          this.handleDeleteGroup = this.handleDeleteGroup.bind(this);
          this.handleRenameGroup = this.handleRenameGroup.bind(this);

          this.fetchGroupData();
        }
        fetchGroupData() {
          var that = this;
          fetch('/admin/datas/photogroup/get', {
            type: 'get',
            dataType: 'json',
            success: function(dt) {
              if (dt.code == 0) {
                localStorage.setItem('photo_group', JSON.stringify(dt.data));
                that.setState({
                  groups: dt.data
                });
              }
            }
          });
        }

        handleGroupItemClick (gid) {
          this.props.groupChange(gid);
        }

        render() {
          var groupItems = this.state.groups.map((group) => (
            <PhotoGroupItem group = {group} gid = {this.props.gid} handleGroupItemClick = {this.handleGroupItemClick} />
          ));
          var key = new Date().getTime();
          return (
            <div id = 'photo-group-div'>
              <ul id = 'photo-group-items-ul'>
                {groupItems}
              </ul>
            </div>
          );
        }
      }
      class PhotoArea extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            gid: -1,
            key: new Date().getTime()
          }
          this.handlePhotoGroupChange = this.handlePhotoGroupChange.bind(this);
          this.handleRefetch = this.handleRefetch.bind(this);
        }
        handlePhotoGroupChange(gid) {
          this.setState({
            gid: gid,
            key: new Date().getTime()
          });
        }
        handleRefetch() {
          this.setState({
            key: new Date().getTime()
          });
        }
        /**
         * 原本想把这个函数封进PhotoFlow 中
         * 但没有找到合适的更新方法
         * 暂且用 key 来更新
         * 以后再看一看有没有更好的方法
         * 现在这个做个记号😊 🔥 
         * 以示可以在这里拉取数据
         * 然后作为 PhotoFlow 的 props 传入
         * 这样封装性不太好
         */
        getGroupPhotos() {

        }
        render() {
          var groups = [];
          return (
            <div id='photo-div'>
              <PhotoFlow key = {this.state.key} gid = {this.state.gid}/>
              <PhotoGroupBar key = {this.state.key + 100} gid = {this.state.gid} groups = {groups} groupChange = {this.handlePhotoGroupChange} />
            </div>
          );
        }
      }
      ReactDOM.render(
        <PhotoArea />,
        document.getElementById('main-div')
      );
      function fetch(url, {
          data = {}, 
          type = 'get', 
          dataType = 'text', 
          success = function(){}, 
          error = function(){}, 
          complete = function(){}}) {
        function urlParamsEncode(obj) {
          var param = '';
          for (let key in obj) {
            param += (encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]) + '&');
          }
          return param.substring(0, param.length - 1);
        }
        var xhr = new XMLHttpRequest();
        if (xhr == null) return;
        if (type == 'get') {
          var params = urlParamsEncode(data);
          if (!url.endsWith('?')) url += '?';
          url += params;
        }
        xhr.open(type, url);
        xhr.onreadystatechange = function () {
          if (xhr.readyState == 4) {
            complete();
            if (xhr.status == 200) {
              switch (dataType) {
                case 'json':
                  success(JSON.parse(xhr.responseText));
                  break;
                case 'xml':
                  success(xhr.responseXML);
                  break;
                case 'text':
                default:
                  success(xhr.responseText);
                  break;
              }
            } else {
              // 此处没有参数
              error();
            }
          }
        };
        if (type == 'post') {
          if (data instanceof FormData) {
            //xhr.setRequestHeader('content-type', 'multipart/form-data');
            xhr.send(data);
          } else {
            var params = urlParamsEncode(data);
            xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
            xhr.send(params)
          }
        } else {
          xhr.send();
        }
      }